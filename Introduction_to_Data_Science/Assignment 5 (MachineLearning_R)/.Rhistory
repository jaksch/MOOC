LF1 <- rep(c('A1','A2'), 2)
y <- c(0,7.12,5.42,13.17)
data3 <- data.frame(forsog=forsog, LF1=LF1, y=y)
data3
m3 <- aov(y ~ LF1 + forsog, data=data3)
LSD.test(m3, 'LF1')
y <- c(NA,7.12,5.42,13.17)
data3 <- data.frame(forsog=forsog, LF1=LF1, y=y)
data3
m3 <- aov(y ~ LF1 + forsog, data=data3)
LSD.test(m3, 'LF1')
LSD.test(m3, 'LF1')
y <- c(0,7.12,5.42,13.17)
data3 <- data.frame(forsog=forsog, LF1=LF1, y=y)
data3
m3 <- aov(y ~ LF1 + forsog, data=data3)
LSD.test(m3, 'LF1')
forsog <- rep(c('001','002'), each = 2)
LF1 <- rep(c('A1','A2'), 2)
y <- c(0,5.05,3.40,8.39)
data4 <- data.frame(forsog=forsog, LF1=LF1, y=y)
data4
m4 <- aov(y ~ LF1 + forsog, data=data4)
LSD.test(m4, 'LF1')
485000-136404
348596/12
500000-141774
358226/12
800*12
462200-128242
333958/12
390000-102394
287606/12
362000-92728
269272/12
10.95+67.25+64.05+117.10+83.35+20.95+65.30+22.90+54.9+256.60+114.25+25+26.27+124.15+
72.21+62.4+93.4+65.93+308+27.15+153.05+73.06+40.9+46.4+66.55+51.25+71.65+104.39+
36+86.8+33.9+97+198.4+49.15+275.5+470+15+113.57+62.3+115.2
10.95+67.25+64.05+117.10+83.35+20.95+65.30+22.90+54.9+256.60+114.25+25+26.27+124.15+
72.21+62.4+93.4+65.93+308+27.15+153.05+73.06+40.9+46.4+66.55+51.25+71.65+104.39+
36+86.8+33.9+97+198.4+49.15+275.5+470+15+113.57+62.3+115.2+150
3992.18/31
100/4
200/4
556*c(9,3,3,1)/16
a <- 556*c(9,3,3,1)/16
sum(a)
c(9,3,3,1)/16
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
library(ShinyDash)
library(shiny)
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
getwd()
setwd('c:\\jakob\\jakob')
library(shiny)
submitButton()
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
tryCatch( setwd('c:\\jakob\\jakob'), warning = function(w) {print('waring')}, error = function(e) {print('error')})
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
setwd(stien()),
tryCatch(
setwd(stien()),
logfiler <- list.files(),
logs <- logfiler[grep('.log$', logfiler)],
log <- rep(c('', '\n'), length(logs)),
log <- log[-length(log)],
for( i in 1:length(logs)){
log[i*2-1] <- logs[i]
},
error = function(e) {print('ingen gyldig sti angivet')} )
fkt <- tryCatch(
setwd(stien()),
logfiler <- list.files(),
logs <- logfiler[grep('.log$', logfiler)],
log <- rep(c('', '\n'), length(logs)),
log <- log[-length(log)],
for( i in 1:length(logs)){
log[i*2-1] <- logs[i]
},
error = function(e) {print('ingen gyldig sti angivet')} )
fkt
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
a <- tryCatch(
setwd(stien()),
logfiler <- list.files(),
logs <- logfiler[grep('.log$', logfiler)],
log <- rep(c('', '\n'), length(logs)),
log <- log[-length(log)],
for( i in 1:length(logs)){
log[i*2-1] <- logs[i]
},
error = function(e) {print('ingen gyldig sti angivet')} )
a
if (a == 'ingen gyldig sti angivet') { return('ingen gyldig sti angivet') }
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
try(scan(file = input$log, what = character(), encoding = "UTF-8", sep = "\n"))
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
runApp('C:\\Users\\Jakob\\Desktop\\Shiny\\Til AMK')
library(ShinyDash)
library(shiny)
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
library(ShinyDash)
library(shiny)
runApp("C:\\Users\\Jakob\\Desktop\\ShinyQuiz")
70000*60
70000*70
54+63+52+84
38000-1700
36300*0.4
36300*0.6
500000-143034
356966/12
500000-164570
335430/12
40000/12
install.packages('ggplot2')
install.packages('dplyr')
library(ggplot2)
library(ggplot2)
df <- read.table(header=T, text='
cond xval yval
A    1  2.0
A    2  2.5
B    1  3.0
B    2  2.0
')
ggplot(df, aes(x=xval, y=yval, group = cond)) +
geom_line() +
geom_point()
ggplot(df, aes(x=xval, y=yval, group = cond)) +
geom_line(linetype="dashed",  # Dashed line
size = 1.5) +       # Thicker line
geom_point(shape = 0,         # Hollow squares
size = 4)          # Large points
ggplot(df, aes(x=xval, y=yval, group = cond)) +
geom_line(aes(linetype=cond), # Line type depends on cond
size = 1.5) +       # Thicker line
geom_point(aes(shape=cond),   # Shape depends on cond
size = 4)          # Large points
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
p1 <-
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) +
geom_line() +
ggtitle("Growth curve for individual chicks")
p1
head(ChickWeight)
summary(ChickWeight)
table(ChickWeight$Chick)
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
getwd()
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
library(rCharts)
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
library(devtools)
install_github("pryr")
devtools::install_github("hadley/pryr")
library(devtools)
install_github("pryr")
library(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
library(shiny)
library(Shiny)
install.packages('shiny')
library(shiny)
run_App('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
hair_eye_male
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
n1
hair_eye = as.data.frame(HairEyeColor)
p2 <- nPlot(Freq ~ Hair, group = 'Eye',
data = subset(hair_eye, Sex == "Female"),
type = 'multiBarChart'
)
p2$chart(color = c('brown', 'blue', '#594c26', 'green'))
p2
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
runApp('C:\\Users\\Jakob\\Desktop\\rCharts')
library(dplyr)
jakob <- 7
print(jakob)
4/(280+36)
install.packages(c("BH", "Formula", "httr", "RCurl", "RJSONIO"))
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(caret)
install.packages('caret', dependencies = TRUE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
length(diagnosis)
adData <- data.frame(diagnosis, predictors)
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
trainIndex
training <- adData[trainIndex, ]
testing <- adData[-trainIndex, ]
trainIndex <- createDataPartition(diagnosis, p = 0.5)
trainIndex
training <- adData[trainIndex, ]
trainIndex <- createDataPartition(diagnosis, p = 0.5, list = FALSE)
training <- adData[trainIndex, ]
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training <- mixtures[inTrain, ]
testing <- mixtures[-inTrain, ]
library(ggplot2)
head(training)
summary(training)
library(Hmisc)
ggplot(data = training, aes(x=rownames(training), y=CompressiveStrength)) +
geom_point()
summary(training)
library(AppliedPredictiveModeling)
library(caret)
library(ggplot2)
library(Hmisc)
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain, ]
testing <- mixtures[-inTrain, ]
head(training)
summary(training)
featurePlot(x=mixtures, y=mixtures$CompressiveStrength, plot='pairs')
ggplot(data = training, aes(y=CompressiveStrength)) +
geom_point()
plot(training$CompressiveStrength)
ggplot(data = training, aes(x=1:nrow(trainig), y=CompressiveStrength)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength)) +
geom_point()
plot(training$CompressiveStrength)
View(mixtures)
training$age_factor <- cut2(training$age, g = 4)
age_factor <- cut2(training$age, g = 4)
sum(is.na(training$age))
str(training)
training$Age_factor <- cut2(training$Age, g = 4)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Age_factor)) +
geom_point()
training$Cement_factor <- cut2(training$Cement, g = 4)
training$BlastFurnaceSlag_factor <- cut2(training$BlastFurnaceSlag, g = 4)
training$FlyAsh_factor <- cut2(training$FlyAsh, g = 4)
training$Water_factor <- cut2(training$Water, g = 4)
training$Superplasticizer_factor <- cut2(training$Superplasticizer, g = 4)
training$CoarseAggregate_factor <- cut2(training$CoarseAggregate, g = 4)
training$FineAggregate_factor <- cut2(training$FineAggregate, g = 4)
training$Age_factor <- cut2(training$Age, g = 4)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=FlyAsh_factor)) +
geom_point()
training$Age_factor <- cut2(training$Age, g = 2)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Age_factor)) +
geom_point()
training$Age_factor <- cut2(training$Age, g = 3)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Age_factor)) +
geom_point()
training$Age_factor <- cut2(training$Age, g = 3)
## plot CompressiveStrength (respons) versus the index of the samples
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Age_factor)) +
geom_point()
Age_factor
training$Age_factor <- cut2(training$Age, g = 3)
training$Age_factor
training$Age_factor <- cut2(training$Age, g = 4)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Age_factor)) +
geom_point()
training$FlyAsh_factor <- cut2(training$FlyAsh, g = 2)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=FlyAsh_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Cement_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=BlastFurnaceSlag_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Water_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=Superplasticizer_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=CoarseAggregate_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=FineAggregate_factor)) +
geom_point()
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=FlyAsh_factor)) +
geom_point()
training$FlyAsh_factor <- cut2(training$FlyAsh, g = 4)
ggplot(data = training, aes(x=1:nrow(training), y=CompressiveStrength, color=FlyAsh_factor)) +
geom_point()
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain, ]
testing <- mixtures[-inTrain, ]
ggplot(data = training, aes(x=SuperPlasticizer)) +
geom_histogram()
head(training)
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram()
summary(training)
ggplot(data = training, aes(x=log10(Superplasticizer))) +
geom_histogram()
log10(0)
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram()
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram(binwidth=0.001)
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram(binwidth=0.0001)
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram(binwidth=0.0005)
ggplot(data = training, aes(x=Superplasticizer)) +
geom_histogram(binwidth=0.0002)
data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
trainIndex <- createDataPartition(diagnosis, p = 3/4)[[1]]
training <- adData[trainIndex, ]
testing <- adData[-trainIndex, ]
head(training)
library(dplyr)
training2 <- select(training, starts_with('IL', ignore.case = FALSE))
head(training2)
preProcess(training2, method = 'pca')
preProcess(training2, method = 'pca', thresh = 0.8)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
trainIndex <- createDataPartition(diagnosis, p = 3/4)[[1]]
training <- adData[trainIndex, ]
testing <- adData[-trainIndex, ]
head(training)
non_PCA <- train(x=training, y=training$diagnosis, method = 'glm')
warnings()
non_PCA <- train(diagnosis ~ ., method = 'glm')
non_PCA <- train(diagnosis ~ ., data = training, method = 'glm')
str(training)
summary(training)
non_PCA <- train(diagnosis ~ ., data = training, preProcess = c('center', 'scale'), method = 'glm')
warnings()
non_PCA_model <- train(diagnosis ~ ., data = training, preProcess = c('center', 'scale'),
method = 'glm')
non_PCA_model
non_PCA_model <- train(diagnosis ~ ., data = training,
method = 'glm')
non_PCA_model
arg(non_PCA_model)
attributes(non_PCA_model)
non_PCA_model$modelInfo
non_PCA_model$finalModel
non_PCA_model1 <- train(diagnosis ~ ., data = training, preProcess = c('center', 'scale'),
method = 'glm')
non_PCA_model1
attributes(non_PCA_model1)
pred1 <- predict(non_PCA_model1, testing)
pred1
confusionMatrix(pred1, testing$diagnosis)
non_PCA_model2 <- train(diagnosis ~ ., data = training, method = 'glm')
non_PCA_model2
non_PCA_model2$finalModel
pred2 <- predict(non_PCA_model2, testing)
confusionMatrix(pred2, testing$diagnosis) ## accuracy = 0.7561
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
trainIndex <- createDataPartition(diagnosis, p = 3/4)[[1]]
training <- adData[trainIndex, ]
testing <- adData[-trainIndex, ]
head(training)
str(training)
summary(training)
non_PCA_model2 <- train(diagnosis ~ ., data = training, method = 'glm')
non_PCA_model2
## the model created
non_PCA_model2$finalModel
pred2 <- predict(non_PCA_model2, testing)
confusionMatrix(pred2, testing$diagnosis) ## accuracy = 0.7561
preProcess(training2, method = 'pca', thresh = 0.8)
PCA_model1 <- train(diagnosis ~ ., data = training2, preProcess = c(method = 'pca', thresh = 0.8),
method = 'glm')
new_vars <- preProcess(training2, method = 'pca', thresh = 0.8)
attributes(new_vars)
new_vars$pcaComp
new_vars
new_vars$data
new_vars$rotation
PCA_model1 <- train(x = new_vars$rotation, y = training2$diagnosis, method = 'glm')
length(training2$diagnosis)
PCA_model1 <- train(x = new_vars$rotation, y = training$diagnosis, method = 'glm')
head(training2)
new_vars$ica
new_vars$numComp
training2 <- cbind(training$diagnosis, training2)
head(training2)
PCA_model1 <- train(diagnosis ~ ., data = training, data = training2,
preProcess = list(method = c("center", "scale"), thresh = 0.8), method = 'glm')
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = list(method = c("center", "scale"), thresh = 0.8), method = 'glm')
tail(training2)
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = list(method = c('pca'), thresh = 0.8), method = 'glm')
training2
training2 <- cbind(diagnosis = training$diagnosis, training2)
head(training2)
training2 <- select(training, starts_with('IL', ignore.case = FALSE))
training2 <- cbind(diagnosis = training$diagnosis, training2)
head(training2)
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = list(method = c('pca'), thresh = 0.8), method = 'glm')
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = list(method = 'pca', thresh = 0.8), method = 'glm')
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = list(method = "pca", thresh = 0.8), method = 'glm')
preProcess = c(method = "pca", thresh = 0.8), method = 'glm')
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = c(method = "pca", thresh = 0.8), method = 'glm')
PCA_model1 <- train(diagnosis ~ ., data = training2,
preProcess = "pca", method = 'glm')
training2 <- select(training, starts_with('IL', ignore.case = FALSE))
head(training2)
new_vars <- preProcess(training2, method = 'pca', thresh = 0.8)
trainPCA <- predict(new_vars, training2)
trainPCA
trainPCA2 <- cbind(diagnosis = training$diagnosis, trainPCA)
PCA_model <- train(diagnosis ~ ., data = trainPCA2, method = 'glm')
testPCA <- predict(PCA_model, trainPCA[, -1])
PCA_model
trainPCA
testPCA <- predict(PCA_model, trainPCA2[, -1])
confusionMatrix(testing$diagnosis, predict(PCA_model, testPCA))
predict(PCA_model, testPCA)
testPCA
PCA_model
testPCA <- predict(PCA_model, testing[, -1])
testing2 <- select(testing, starts_with('IL', ignore.case = FALSE))
preProc <- preProcess(training2, method = 'pca', thresh = 0.8)
trainPCA <- predict(preProc, training2)
trainPCA2 <- cbind(diagnosis = training$diagnosis, trainPCA)
PCA_model <- train(diagnosis ~ ., data = trainPCA2, method = 'glm')
testPCA <- predict(preProc, testing2)
confusionMatrix(testing$diagnosis, predict(PCA_model, testPCA))
training2 <- select(training, starts_with('IL', ignore.case = FALSE))
training2 <- cbind(diagnosis = training$diagnosis, training2)
head(training2)
testing2 <- select(testing, starts_with('IL', ignore.case = FALSE))
testing2 <- cbind(diagnosis = testing$diagnosis, testing2)
head(testing2)
non_PCA_model <- train(diagnosis ~ ., data = training2, method = 'glm')
non_PCA_model
non_PCA_model$finalModel
pred <- predict(non_PCA_model, testing2)
confusionMatrix(pred, testing2$diagnosis) ## accuracy = 0.7561
preProc <- preProcess(training2[, -1], method = 'pca', thresh = 0.8)
trainPCA <- predict(preProc, training2[, -1])
PCA_model <- train(diagnosis ~ ., data = trainPCA, method = 'glm')
trainPCA <- predict(preProc, training2)
trainPCA
PCA_model <- train(training2$diagnosis ~ ., data = trainPCA, method = 'glm')
testPCA <- predict(preProc, testing2[, -1])
confusionMatrix(testing2$diagnosis, predict(PCA_model, testPCA)) ## 0.7195
setwd('C:\\Users\\Jakob\\Documents\\GitHub\\Introduction_to_Data_Science\\Assignment 5 (MachineLearning_R)')
data <- read.csv(file = 'seaflow_21min.csv', header = TRUE)
head(data)
table(data$pop)
summary(data)
library(caret)
